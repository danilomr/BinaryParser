package visualinterface;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * Panel used to add elements to the visual interface. 
 * @author danilo.melo.rocha
 *
 */
public class FilePanel extends JPanel implements ActionListener {
	
	private  JLabel labelFile, labelFolder;

    private JTextField textURL, textFolder;

    private JButton buttonFile, buttonFolder, buttonParseJSONToFile, buttonParseJSONOnScreen;

    public FilePanel() {
        GridBagLayout layout = new GridBagLayout();
        setLayout(layout);

        GridBagConstraints gbc00 = makeGbc(0, 0);
        this.labelFile = new JLabel("File with JSON object translated into binary format:");
        add(this.labelFile, gbc00);

        GridBagConstraints gbc01 = makeGbc(0, 1);
        this.textURL = new JTextField(45);
        add(this.textURL, gbc01);

        GridBagConstraints gbc11 = makeGbc(1, 1);
        this.buttonFile = new JButton("Select file");
        add(this.buttonFile, gbc11);


        GridBagConstraints gbc21 = makeGbc(2, 1);
        this.buttonParseJSONToFile = new JButton("Parse JSON to file");
        add(this.buttonParseJSONToFile, gbc21);

        GridBagConstraints gbc31 = makeGbc(3, 1);
        this.buttonParseJSONOnScreen = new JButton("Parse JSON on screen");
        add(this.buttonParseJSONOnScreen, gbc31);



        this.labelFolder = new JLabel("Directory where parsed file will be saved:");
        GridBagConstraints gbc02 = makeGbc(0, 2);
        add(this.labelFolder,gbc02);

        GridBagConstraints gbc03 = makeGbc(0, 3);
        this.textFolder = new JTextField(45);
        add(this.textFolder, gbc03);

        GridBagConstraints gbc13 = makeGbc(1, 3);
        this.buttonFolder = new JButton("Select directory");
        add(this.buttonFolder,gbc13);

        this.buttonFile.addActionListener(this);// registrando o painel como ouvinte
        this.buttonFolder.addActionListener(this);
        this.buttonParseJSONToFile.addActionListener(this);
        this.buttonParseJSONOnScreen.addActionListener(this);
    }

    private GridBagConstraints makeGbc(int x, int y) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = 1;
        gbc.gridheight = 1;
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.weightx = x;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(1, 5, 5, 1);
        gbc.anchor = (x == 0) ? GridBagConstraints.LINE_START : GridBagConstraints.LINE_END;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        return gbc;
    }

    /**
     * Listener method used to manage the events generated by the click of the buttons.
     */
    public void actionPerformed(ActionEvent evt) {
        Object source = evt.getSource();
        if (source == this.buttonFile) {
            JFileChooser fileChooser = new JFileChooser();
            //JFileChooser fileChooser = new JFileChooser("C:\\Users\\danilo.melo.rocha\\Desktop\\project clx\\json_binary_parser\\");
            int returnValue = fileChooser.showOpenDialog(this);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                String fileName = fileChooser.getSelectedFile().getAbsolutePath();
                String filePath = fileName.substring(0, fileName.lastIndexOf(File.separatorChar) + 1);
                this.textFolder.setText(filePath);
                this.textURL.setText(fileName);
            }
        } else if (source == this.buttonFolder){
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = fileChooser.showOpenDialog(this);
            String fileName = null;
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                fileName = fileChooser.getSelectedFile().getAbsolutePath();
                this.textFolder.setText(fileName);
            }
        } else if (source == this.buttonParseJSONToFile) {
            if (formIsValid()) {
                parseToFile();
            }
        } else if (source == this.buttonParseJSONOnScreen) {
            if (formIsValid()) {
                parseOnScreen();
            }
        }
    }

    /**
     * Check if all required fields were correct filled.
     * @return boolean
     */
    private boolean formIsValid(){
        boolean result = false;
        if (this.textURL.getText().length() > 0 ) {
            if (this.textFolder.getText().length() > 0 ){
                result = true;
            } else {
                System.out.println("Inform the directory where the parsed file will be saved!");
            }
        } else {
            System.out.println("Inform the file to be parsed!");
        }
        return result;
    }

    /**
     * Method used to parse binary file and generate a human readable file.
     */
    private void parseToFile() {
    }

    /**
     * Method used to parse binary file and display the results on the screen.
     */
    private void parseOnScreen() {
    }

}
